{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar IconTint = function (_Component) {\n  _inherits(IconTint, _Component);\n\n  function IconTint() {\n    _classCallCheck(this, IconTint);\n\n    return _possibleConstructorReturn(this, (IconTint.__proto__ || Object.getPrototypeOf(IconTint)).apply(this, arguments));\n  }\n\n  _createClass(IconTint, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _props = this.props;\n      var src = _props.src;\n      var color = _props.color;\n      var customRef = _props.customRef;\n      var width = _props.width;\n      var height = _props.height;\n      var canvas = this.refs[customRef || '_IconTint'];\n      var pic = new Image();\n      pic.src = src;\n      var tintCanvas = document.createElement('canvas');\n      var tintCtx = tintCanvas.getContext('2d');\n      var ctx = canvas.getContext('2d');\n\n      pic.onload = function () {\n        var result = _this2._scaleImage(pic.width, pic.height, width, height);\n\n        tintCanvas.width = result.width;\n        tintCanvas.height = result.height;\n        tintCtx.fillStyle = color;\n        tintCtx.fillRect(0, 0, result.width, result.height);\n        tintCtx.globalCompositeOperation = 'destination-atop';\n        tintCtx.drawImage(pic, 0, 0, result.width, result.height);\n        ctx.globalAlpha = 1;\n        ctx.drawImage(tintCanvas, 0, 0, result.width, result.height);\n      };\n    }\n  }, {\n    key: '_scaleImage',\n    value: function _scaleImage(srcWidth, srcHeight, maxWidth, maxHeight) {\n      var ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);\n      return {\n        width: srcWidth * ratio,\n        height: srcHeight * ratio\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props;\n      var src = _props2.src;\n      var color = _props2.color;\n      var customRef = _props2.customRef;\n      var width = _props2.width;\n      var height = _props2.height;\n      return _react2.default.createElement('canvas', {\n        width: width,\n        height: height,\n        ref: customRef || '_IconTint'\n      });\n    }\n  }]);\n\n  return IconTint;\n}(_react.Component);\n\nexports.default = IconTint;\nIconTint.propTypes = {\n  src: _react.PropTypes.string.isRequired,\n  color: _react.PropTypes.string.isRequired,\n  customRef: _react.PropTypes.string,\n  width: _react.PropTypes.string,\n  height: _react.PropTypes.string\n};","map":null,"metadata":{},"sourceType":"script"}